package com.scamofty.cleanarchitecturenoteapp.feature_note.domain.data.repository

import com.scamofty.cleanarchitecturenoteapp.feature_note.domain.data.local_source.NoteDao
import com.scamofty.cleanarchitecturenoteapp.feature_note.domain.data.remote_source.NoteApi
import com.scamofty.cleanarchitecturenoteapp.feature_note.domain.model.Note
import com.scamofty.cleanarchitecturenoteapp.feature_note.domain.repository.NoteRepository
import kotlinx.coroutines.flow.Flow


//So I don't have to look this up again:
/*
| Layer      | Local (Room)           | Remote (Ktor)         |
| ---------- | ---------------------- | --------------------- |
| Contract   | `NoteDao` (interface)  | `NoteApi` (interface) |
| Data shape | `Note` (entity/domain) | `NoteDto` (DTO/JSON)  |
| Impl       | Generated by Room      | `NoteApiImpl` (Ktor)  |
 */
class NoteRepositoryImpl(
    private val dao: NoteDao,
    private val api: NoteApi
) : NoteRepository {
    override fun getNotes(): Flow<List<Note>> {
        return dao.getNotes()
    }

    override suspend fun getNoteById(id: Int): Note? {
        return dao.getNoteById(id)
    }

    override suspend fun insertNote(note: Note) {
        api.insertNote(note.toDto())
        dao.insertNote(note)
    }

    override suspend fun deleteNote(note: Note) {
        if (note.id != null){
            api.deleteNote(note.id)
        }
        dao.deleteNote(note)
    }

    override suspend fun refreshNotes() {
        val remoteNotes = api.getNotes()
        remoteNotes.forEach { dto ->
            dao.insertNote(dto.toDomain())
        }
    }
}